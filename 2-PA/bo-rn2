### Teil 1: Datenbankkonzeption und -entwicklung

**Schritt 1: Konzeption eines ER-Diagramms in der 3. Normalform**

1. **Bestimmen der Entitäten**: Identifizieren Sie die Schlüsselkomponenten Ihres Systems. Für ein einfaches Beispiel könnten dies `Benutzer`, `Beiträge` und `Kommentare` sein.

2. **Definieren der Beziehungen**: Bestimmen Sie die Art der Beziehungen zwischen Ihren Entitäten. Zum Beispiel hat ein `Benutzer` viele `Beiträge` (1:n), und ein `Beitrag` hat viele `Kommentare` (1:n).

3. **Normalisierung**: Überprüfen Sie Ihre Entwürfe auf redundante Daten und stellen Sie sicher, dass jede Entität in der 3. Normalform ist. Das bedeutet, dass sie in der 1. Normalform (1NF) sein muss (atomare Werte, keine wiederholenden Gruppen), in der 2. Normalform (2NF) (alle Nicht-Schlüsselattribute voll funktional abhängig vom Primärschlüssel), und in der 3. Normalform (3NF) (keine transitiven Abhängigkeiten).

**Schritt 2: SQL-Datenbankerzeugung**

1. **Installation von XAMPP und MySQL Workbench**: Stellen Sie sicher, dass XAMPP läuft und MySQL Workbench installiert ist.

2. **Erstellen der Datenbank**:
```sql
CREATE DATABASE meinprojekt;
USE meinprojekt;
```

3. **Erstellen der Tabellen**:
```sql
CREATE TABLE Benutzer (
    BenutzerID INT AUTO_INCREMENT PRIMARY KEY,
    Name VARCHAR(255),
    Email VARCHAR(255) UNIQUE
);

CREATE TABLE Beitraege (
    BeitragID INT AUTO_INCREMENT PRIMARY KEY,
    BenutzerID INT,
    Titel VARCHAR(255),
    Inhalt TEXT,
    Erstellungsdatum DATETIME,
    FOREIGN KEY (BenutzerID) REFERENCES Benutzer(BenutzerID)
);

CREATE TABLE Kommentare (
    KommentarID INT AUTO_INCREMENT PRIMARY KEY,
    BeitragID INT,
    BenutzerID INT,
    KommentarText TEXT,
    Erstellungsdatum DATETIME,
    FOREIGN KEY (BeitragID) REFERENCES Beitraege(BeitragID),
    FOREIGN KEY (BenutzerID) REFERENCES Benutzer(BenutzerID)
);
```

4. **Testeinträge hinzufügen**:
```sql
INSERT INTO Benutzer (Name, Email) VALUES ('Max Mustermann', 'max@example.com');
INSERT INTO Beitraege (BenutzerID, Titel, Inhalt, Erstellungsdatum) VALUES (1, 'Mein erster Beitrag', 'Das ist der Inhalt meines ersten Beitrags.', NOW());
```

### Teil 2: Entwicklung einer Applikation mit React Native

**Schritt 3: Einrichtung der React Native Umgebung**

1. **Installieren von Node.js**: Stellen Sie sicher, dass Node.js auf Ihrem System installiert ist.

2. **Installieren des React Native CLI**:
```bash
npm install -g react-native-cli
```

3. **Erstellen eines neuen React Native Projekts**:
```bash
react-native init MeinProjekt
```

**Schritt 4: Programmieren der Bedienoberfläche**



##########

!!!!### Teil 2: Entwicklung einer Applikation mit React Native (Fortsetzung)

**Schritt 4: Programmieren der Bedienoberfläche**

Nachdem Sie Ihr React Native Projekt initiiert haben, fangen wir an, die Bedienoberfläche zu entwickeln.

#### Grundgerüst der Anwendung

1. **Navigation**: Installieren Sie `react-navigation` für die Navigation zwischen verschiedenen Bildschirmen.

```bash
npm install @react-navigation/native @react-navigation/stack react-native-screens react-native-safe-area-context
```

2. **Einrichten eines Navigators**:
Erstellen Sie einen neuen Ordner namens `navigation` und darin eine Datei `StackNavigator.js`. Hier definieren Sie die Navigation zwischen Ihren Screens.

```jsx
// In StackNavigator.js
import React from 'react';
import { createStackNavigator } from '@react-navigation/stack';
import HomeScreen from '../screens/HomeScreen';
import DetailsScreen from '../screens/DetailsScreen';

const Stack = createStackNavigator();

function StackNavigator() {
  return (
    <Stack.Navigator initialRouteName="Home">
      <Stack.Screen name="Home" component={HomeScreen} />
      <Stack.Screen name="Details" component={DetailsScreen} />
    </Stack.Navigator>
  );
}

export default StackNavigator;
```

#### Implementierung der Bedienoberfläche

3. **Erstellen des HomeScreen**:
Im Ordner `screens`, erstellen Sie eine Datei `HomeScreen.js`. Dieser Screen kann eine Liste von Beiträgen anzeigen.

```jsx
// In HomeScreen.js
import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, TouchableOpacity } from 'react-native';

function HomeScreen({ navigation }) {
  const [beitraege, setBeitraege] = useState([]);

  // Hier würden Sie normalerweise Daten von Ihrer API abrufen
  useEffect(() => {
    // Angenommen, dies ist Ihre "gefakte" Datenquelle
    const gefakteDaten = [
      { id: '1', titel: 'Erster Beitrag', inhalt: 'Das ist der Inhalt des ersten Beitrags' },
      // Fügen Sie hier weitere Beiträge hinzu
    ];
    setBeitraege(gefakteDaten);
  }, []);

  return (
    <View>
      <FlatList
        data={beitraege}
        keyExtractor={item => item.id}
        renderItem={({ item }) => (
          <TouchableOpacity onPress={() => navigation.navigate('Details', { beitragId: item.id })}>
            <Text>{item.titel}</Text>
          </TouchableOpacity>
        )}
      />
    </View>
  );
}

export default HomeScreen;
```

4. **DetailsScreen**:
Erstellen Sie eine Datei `DetailsScreen.js` im selben Ordner. Dieser Screen zeigt Details zu einem Beitrag an.

```jsx
// In DetailsScreen.js
import React from 'react';
import { View, Text } from 'react-native';

function DetailsScreen({ route }) {
  const { beitragId } = route.params;
  // Hier würden Sie Daten basierend auf beitragId abrufen

  return (
    <View>
      <Text>Details zum Beitrag</Text>
      {/* Hier würden Sie die Details des Beitrags anzeigen */}
      <Text>Beitrag ID: {beitragId}</Text>
    </View>
  );
}

export default DetailsScreen;
```

#### Verbindung zur Datenbank

Um Daten von Ihrer Datenbank abzufragen, benötigen Sie eine API, die die Kommunikation zwischen Ihrer React Native App und Ihrem MySQL-Server ermöglicht. Eine übliche Praxis ist die Verwendung von Express.js, um eine einfache REST-API zu erstellen.

1. **Einrichten eines einfachen Express-Servers**:
Erstellen Sie einen neuen Ordner für Ihren Server, initialisieren Sie ein neues Node.js-Projekt mit `npm init` und installieren Sie Express.js sowie `mysql` für die Datenbankverbindung.

```bash
npm install express mysql
```

2. **Erstellen einer einfachen API**:
Im Serverprojekt, erstellen Sie eine Datei `server.js`. Hier definieren Sie Ihre API-Endpunkte.

```js
// server.js
const express = require('express');
const mysql = require('mysql');
const app = express();
const port = 3000;

// Konfigurieren Sie hier Ihre MySQL-Datenbankverbindung
const db = mysql.createConnection({
  host: 'localhost',
  user: 'IhrBenutzername

##########




**Schritt 5: Implementieren der Logik für Suche, Ausgabe und Berechnungen**

1. **Suchfunktion**: Entwickeln Sie Funktionen, die es Benutzern ermöglichen, Inhalte zu suchen. Dies kann eine einfache Textsuche über Ihre Beiträge sein.

2. **Ausgabe von Inhalten**: Zeigen Sie Inhalte basierend auf Benutzeraktionen an, wie z.B. das Anklicken eines Beitrags, um dessen Kommentare zu sehen.



3. **Berechnungen und Fehlermeldungen**: Implementieren Sie jegliche erforderliche Logik für Berechnungen innerhalb Ihrer App und stellen Sie sicher, dass Fehlermeldungen dem Benutzer klar und hilfreich präsentiert werden.

